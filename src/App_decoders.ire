[@program]
module D = Decoders;

[@program]
module Decode = (D: D.Decode.S) => {
  open D;

  let zPairs: decoder(list((Z.t, Z.t))) =
    list(
      list(int)
      >>= (
        fun
        | [y1, y2] => succeed((Z.of_int(y1), Z.of_int(y2)))
        | _ => fail("expected 2 elements for a pair")
      ),
    );
};

[@program]
module Encode = (E: D.Encode.S) => {
  open E;

  let intPairs: encoder(list((Caml.Int.t, Caml.Int.t))) =
    (xs: list((Caml.Int.t, Caml.Int.t))) =>
      xs
      |> list((x: (Caml.Int.t, Caml.Int.t)) =>
           [fst(x), snd(x)] |> list(y => int(y))
         );

  let zPairs: encoder(list((Z.t, Z.t))) =
    (xs: list((Z.t, Z.t))) =>
      xs
      |> list((x: (Z.t, Z.t)) => [fst(x), snd(x)] |> list(y => int(y)));
};
