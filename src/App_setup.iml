[@@@redef "true"]

type pairList = (int * int) list

type person = int

type requirement =
  | Sit_together of (person * person)
  | Sit_apart of (person * person)

type table = int

type assignment = (person, table option) Map.t

let should_sit_together = [(0, 1); (1, 2)]
let should_sit_apart = [(1, 3)]
let total_guests = 4
let max_guests_per_table = 3
let number_of_tables = 3

let table_total (a : assignment) (t : table) (total_guests : int) =
  List.length
    (List.filter
       (fun x  -> (Map.get x a) = Some t) (0 -- total_guests))

let together_requirement_met (a : assignment) ((p, p') : (int * int)) =
  let p_tbl, p'_tbl = Map.get p a, Map.get p' a in
  p_tbl = p'_tbl

let apart_requirement_met (a : assignment) ((p, p') : (int * int)) =
  let p_tbl, p'_tbl = Map.get p a, Map.get p' a in
  p_tbl <> p'_tbl

let valid_assignment (a : assignment) (should_sit_together : pairList) (should_sit_apart : pairList) (total_guests : int) (max_guests_per_table : int) (number_of_tables : int)  =
  List.for_all (together_requirement_met a) should_sit_together
  &&
  List.for_all (apart_requirement_met a) should_sit_apart
  &&
  List.for_all (fun p -> Map.get p a <> None) (0 -- total_guests)
  &&
  List.for_all (fun t -> (table_total a t total_guests) <= max_guests_per_table) (0 -- number_of_tables)

(* instance (fun x -> valid_assignment x should_sit_together should_sit_apart total_guests max_guests_per_table number_of_tables) *)

let pairs_from_cx cx =
  let (definite, default) = Map.extract cx in
  (0 -- total_guests) |> CCList.map (fun p ->
      let found = definite |> CCList.find_opt (fun (p', t) -> p = p') in
      match found with
      | Some (p, t) -> (p, t)
      | None -> (p, default)
    ) |> CCList.map (fun (p, t) -> (p, CCOpt.get_exn t))
[@@program]


[@@@require "decoders-yojson"]

[@@@use "src/App_decoders.ire"]

module D = Decode(Decoders_yojson.Basic.Decode) [@@program]
module E = Encode(Decoders_yojson.Basic.Encode) [@@program]

let print_pairs (cx : assignment) =
  Decoders_yojson.Basic.Encode.encode_string E.zPairs (pairs_from_cx cx) [@@program]
